
    Provide a unified interface to a set of interfaces in a subsystem. Façade defines a higher-level interface that makes the subsystem easier to use. 
    Facade provides a single interface.
    Programmers comfort is a main purpose of facade.
    Simplicity is the aim of facade pattern.
    Facade design pattern is used for promoting subsystem independence and portability.
    Subsystem may be dependent with one another. In such case, facade can act as a coordinator and decouple the dependencies between the subsystems.
    Translating data to suit the interface of a subsystem is done by the facade.
e.g starting a car, OS of a computer


Common Mistakes while Implementing Facade Design Pattern
    just for the sake of introducing a facade layer developers tend to create additional classes. Layered architecture is good but assess the need for every layer. Just naming a class as ABCDFacade.java doesn’r really make it a facade.
    Creating a java class and ‘forcing’ the UI to interact with other layers through it and calling it a facade layer is one more popular mistake. Facade layer should not be forced and its always optional. If the client wishes to interact with components directly it should be allowed to bypass the facade layer.
    Methods in facade layer has only one or two lines which calls the other components. If facade is going to be so simple it invalidates its purpose and clients can directly do that by themselves.
    A controller is not a facade.
    Facade is ‘not’ a layer that imposes security and hides important data and implementation.
    Don’t create a facade layer in advance. If you feel that in future the subsystem is going to evolve and become complicated to defend that do not create a stub class and name it a facade. After the subsystem has become complex you can implement the facade design pattern.
    Subsystems are not aware of facade and there should be no reference for facade in subsystems.
